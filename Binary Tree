import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.Queue;
import java.lang.Math;




public class BinaryTreeclass {
    static class Node {
        int data;
        Node left;
        Node right;

        public Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }

    }
    // Queue<Integer> q=new LinkedList()<>;

    static class BinaryTree {
        static int idx = -1;

        public Node root(int nodes[]) {
            idx++;
            if (nodes[idx] == -1) {
                return null;
            }
            Node newNode = new Node(nodes[idx]);
            newNode.left = root(nodes);
            newNode.right = root(nodes);
            return newNode;
        }

        public void preorder(Node root) {
            if (root == null) {
                // System.out.println();
                return;
            }
            System.out.print(root.data + "  ");
            preorder(root.left);
            preorder(root.right);
        }

        public void inorder(Node root) {
            if (root == null) {
                return;
            }
            inorder(root.left);
            System.out.print(root.data + "  ");
            inorder(root.right);
        }

        public void postorder(Node root) {
            if (root == null) {
                return;
            }
            postorder(root.left);
            postorder(root.right);
            System.out.print(root.data + "  ");
        }

        public void levelorder(Node root) {

            Queue<Node> que = new LinkedList<>();
            que.add(root);
            que.add(null);

            while (!que.isEmpty()) {
                Node curNode = que.remove();
                if (curNode == null) {
                    System.out.println();

                    if (que.isEmpty()) {
                        break;
                    } else {
                        que.add(null);
                    }
                } else {
                    System.out.print(curNode.data + "  ");
                    if (curNode.left != null) {
                        que.add(curNode.left);
                    }
                    if (curNode.right != null) {
                        que.add(curNode.right);
                    }
                }

            }
        }

        public int count(Node root) {
            if (root == null) {
                return 0;
            }
            int leftnodes = count(root.left);
            int rightnodes = count(root.right);
            return leftnodes + rightnodes + 1;
        }

        public int sumoftree(Node root) {
            if (root == null) {
                return 0;
            }
            int leftsum = sumoftree(root.left);

            int rightsum = sumoftree(root.right);

            return leftsum + rightsum + root.data;
        }

        public int height(Node root) {
            if (root == null) {
                return 0;
            }
            int leftheight = height(root.left);
            int rightheight = height(root.right);
            int maxheight = Math.max(leftheight, rightheight) + 1;
            return maxheight;
        }

        public int diameter(Node root) {// togo through root o(n):::::::::::: approach 1
            if (root == null) {
                return 0;
            }
            int diam1 = diameter(root.left);
            int diam2 = diameter(root.right);
            int diam4 = height(root.left) + height(root.right) + 1;
            return Math.max(diam1, Math.max(diam2, diam4));
        }

        static class treeInfo {
            int ht;
            int diam;

            treeInfo(int ht, int diam) {
                this.ht = ht;
                this.diam = diam;
            }
        }

        public treeInfo diameter2(Node root) {
            if (root == null) {
                return new treeInfo(0, 0);
            }
            treeInfo left = diameter2(root.left);
            treeInfo right = diameter2(root.right);
            int myheight = Math.max(left.ht, right.ht) + 1;
            int diam1 = left.diam;
            int diam2 = right.diam;
            int diam3 = left.ht + right.ht + 1;
            int mydiam = Math.max(Math.max(diam1, diam2), diam3);
            treeInfo myInfo = new treeInfo(myheight, mydiam);
            return myInfo;
        }

    }

    public static void main(String[] args) {
        int nodes[] = { 1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1 };
        BinaryTree tree = new BinaryTree();
        Node root = tree.root(nodes);
        // System.out.println(root.data);
        // tree.preorder(root);
        // System.out.println();
        // tree.inorder(root);
        // System.out.println();
        // tree.postorder(root);
        // System.out.println();
        // tree.levelorder(root);
        // System.out.println(tree.count(root));
        // System.out.println(tree.sumoftree(root));
        System.out.println(tree.height(root));
        System.out.println(tree.diameter(root));
        System.out.println(tree.diameter2(root).diam);
    }
}
