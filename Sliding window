// Sliding Window Maximum (Maximum of all subarrays of size K)

// Given an array and an integer K, find the maximum for each and every contiguous subarray of size K.

// Examples : 

// Input: arr[] = {1, 2, 3, 1, 4, 5, 2, 3, 6}, K = 3 
// Output: 3 3 4 5 5 5 6
// Explanation: Maximum of 1, 2, 3 is 3
//                        Maximum of 2, 3, 1 is 3
//                        Maximum of 3, 1, 4 is 4
//                        Maximum of 1, 4, 5 is 5
//                        Maximum of 4, 5, 2 is 5 
//                        Maximum of 5, 2, 3 is 5
//                        Maximum of 2, 3, 6 is 6

// Input: arr[] = {8, 5, 10, 7, 9, 4, 15, 12, 90, 13}, K = 4 
// Output: 10 10 10 15 15 90 90          
// Explanation: Maximum of first 4 elements is 10, similarly for next 4 
//                        elements (i.e from index 1 to 4) is 10, So the sequence 
//                        generated is 10 10 10 15 15 90 90

import java.util.Arrays;

public class Sliding_window {

    public static int[] slide(int[] arr, int k) {
        int[] res = new int[arr.length - k + 1];
        int count = 0;

        int i = 0;
        int j = i + (k - 1);
        int max = arr[i];
        while (j <= arr.length - 1) {
            int l = i;
            while (l <= j) {
                if (arr[l] > max) {
                    max = arr[l];
                }
                l++;
            }
            res[count] = max;
            count++;
            i++;
            j = i + (k - 1);
        }

        return res;
    }

    public static void main(String[] args) {
        int arr[] = { 8, 5, 10, 7, 9, 4, 15, 12, 90, 13 };
        int k = 4;
        System.out.println(Arrays.toString(slide(arr, k)));

    }
}
